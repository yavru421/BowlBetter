import { describe, expect, test } from 'vitest';
import { mochaPlugins } from '.';
describe('mochaPlugins', () => {
    test('is empty when no plugins are configured by the env', () => {
        const env = parseEnv('NODE_ENV="development"');
        expect(mochaPlugins(env)).toEqual([]);
    });
    test('includes error reporter plugin when configured', () => {
        const env = parseEnv('NODE_ENV="development" PLUGINS="error-reporter"');
        const plugins = mochaPlugins(env);
        expect(plugins).toHaveLength(1);
        expect(plugins[0].name).toBe('mocha-error-reporter');
    });
    test('includes canvas mode plugin when configured', () => {
        const env = parseEnv('NODE_ENV="development" PLUGINS="canvas-mode"');
        const plugins = mochaPlugins(env);
        expect(plugins).toHaveLength(1);
        expect(plugins[0].name).toBe('mocha-canvas-mode');
    });
    test('includes both when configured, and ignres unknown ones', () => {
        const env = parseEnv('NODE_ENV="development" PLUGINS="error-reporter,canvas-mode,foobar"');
        const plugins = mochaPlugins(env);
        expect(plugins).toHaveLength(2);
        expect(plugins[0].name).toBe('mocha-error-reporter');
        expect(plugins[1].name).toBe('mocha-canvas-mode');
    });
});
function parseEnv(envVars) {
    return envVars.split(' ').reduce((acc, curr) => {
        const [key, value] = curr.split('=');
        acc[key] = value.replace(/"/g, '');
        return acc;
    }, {});
}
