import { test, describe, expect } from 'vitest';
import { transformJSX, addSourceAttributes, stripSourceAttributes, replaceTextAndStripSourceAttributes, } from './canvas-mode';
describe('transforming JSX', () => {
    // A larger snapshot, so we can spot-check that things like id generation, while
    // keeping other tests more focused on specific cases around editability.
    test('annotates elements that look like they should be editable with custom attributes', () => {
        const { code } = transformJSX(`
      import { useState } from 'react';
      import { SquareCheck, Menu, X } from 'lucide-react';

      export default function Header() {
        const [isMenuOpen, setIsMenuOpen] = useState(false);

        return (
          <header className="bg-gradient-to-r shadow-lg">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
              <div className="flex justify-between h-16">
                <div className="flex items-center">
                  <div className="flex-shrink-0 flex items-center">
                    <SquareCheck className="h-8 w-8 text-white" />
                    <span className="ml-2 text-xl font-bold text-white">TaskFlow</span>
                  </div>
                  <div className="hidden md:ml-6 md:flex md:space-x-8">
                    <a href="#" className="px-3 py-2 text-sm font-medium">Home</a>
                    <a href="#" className="px-3 py-2 text-sm font-medium">Features</a>
                    <a href="#" className="px-3 py-2 text-sm font-medium">Pricing</a>
                    <a href="#" className="px-3 py-2 text-sm font-medium">About</a>
                  </div>
                </div>
                <div className="hidden md:flex items-center">
                  <button className="px-4 py-2 rounded-md text-sm font-medium shadow-sm transition-all duration-200 transform">
                    Sign Up
                  </button>
                </div>
                <div className="flex items-center md:hidden">
                  <button
                    type="button"
                    className="text-white"
                    onClick={() => setIsMenuOpen(!isMenuOpen)}
                  >
                    {isMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
                  </button>
                </div>
              </div>
            </div>

            {/* Mobile menu */}
            {isMenuOpen && (
              <div className="md:hidden">
                <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-indigo-500">
                  <a href="#" className="block px-3 py-2 text-base font-medium">Home</a>
                  <a href="#" className="block px-3 py-2 text-base font-medium">Features</a>
                  <a href="#" className="block px-3 py-2 text-base font-medium">Pricing</a>
                  <a href="#" className="block px-3 py-2 text-base font-medium">About</a>
                  <button className="w-full text-center px-4 py-2 rounded-md text-sm font-medium mt-3">
                    Sign Up
                  </button>
                </div>
              </div>
            )}
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
              <p className="text-indigo-100 text-sm md:text-base">Streamline your productivity with our intuitive task management system</p>
            </div>
          </header>
        );
      }
      `, '/app/src/Header.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      import { useState } from 'react';
      import { SquareCheck, Menu, X } from 'lucide-react';

      export default function Header() {
        const [isMenuOpen, setIsMenuOpen] = useState(false);

        return (
          <header className="bg-gradient-to-r shadow-lg">
                  <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                    <div className="flex justify-between h-16">
                      <div className="flex items-center">
                        <div className="flex-shrink-0 flex items-center">
                          <SquareCheck className="h-8 w-8 text-white" />
                          <span className="ml-2 text-xl font-bold text-white" data-mocha-canvas-id="src/Header.tsx:15:20" data-mocha-canvas-editable="true" data-mocha-canvas-text="TaskFlow">TaskFlow</span>
                        </div>
                        <div className="hidden md:ml-6 md:flex md:space-x-8">
                          <a href="#" className="px-3 py-2 text-sm font-medium" data-mocha-canvas-id="src/Header.tsx:18:20" data-mocha-canvas-editable="true" data-mocha-canvas-text="Home">Home</a>
                          <a href="#" className="px-3 py-2 text-sm font-medium" data-mocha-canvas-id="src/Header.tsx:19:20" data-mocha-canvas-editable="true" data-mocha-canvas-text="Features">Features</a>
                          <a href="#" className="px-3 py-2 text-sm font-medium" data-mocha-canvas-id="src/Header.tsx:20:20" data-mocha-canvas-editable="true" data-mocha-canvas-text="Pricing">Pricing</a>
                          <a href="#" className="px-3 py-2 text-sm font-medium" data-mocha-canvas-id="src/Header.tsx:21:20" data-mocha-canvas-editable="true" data-mocha-canvas-text="About">About</a>
                        </div>
                      </div>
                      <div className="hidden md:flex items-center">
                        <button className="px-4 py-2 rounded-md text-sm font-medium shadow-sm transition-all duration-200 transform" data-mocha-canvas-id="src/Header.tsx:25:18" data-mocha-canvas-editable="true" data-mocha-canvas-text="Sign%20Up">
                          Sign Up
                        </button>
                      </div>
                      <div className="flex items-center md:hidden">
                        <button
                    type="button"
                    className="text-white"
                    onClick={() => setIsMenuOpen(!isMenuOpen)} data-mocha-canvas-id="src/Header.tsx:30:18" data-mocha-canvas-editable="false" data-mocha-canvas-text="">

                          {isMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
                        </button>
                      </div>
                    </div>
                  </div>

                  {/* Mobile menu */}
                  {isMenuOpen &&
            <div className="md:hidden">
                      <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-indigo-500">
                        <a href="#" className="block px-3 py-2 text-base font-medium" data-mocha-canvas-id="src/Header.tsx:45:18" data-mocha-canvas-editable="true" data-mocha-canvas-text="Home">Home</a>
                        <a href="#" className="block px-3 py-2 text-base font-medium" data-mocha-canvas-id="src/Header.tsx:46:18" data-mocha-canvas-editable="true" data-mocha-canvas-text="Features">Features</a>
                        <a href="#" className="block px-3 py-2 text-base font-medium" data-mocha-canvas-id="src/Header.tsx:47:18" data-mocha-canvas-editable="true" data-mocha-canvas-text="Pricing">Pricing</a>
                        <a href="#" className="block px-3 py-2 text-base font-medium" data-mocha-canvas-id="src/Header.tsx:48:18" data-mocha-canvas-editable="true" data-mocha-canvas-text="About">About</a>
                        <button className="w-full text-center px-4 py-2 rounded-md text-sm font-medium mt-3" data-mocha-canvas-id="src/Header.tsx:49:18" data-mocha-canvas-editable="true" data-mocha-canvas-text="Sign%20Up">
                          Sign Up
                        </button>
                      </div>
                    </div>
            }
                  <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
                    <p className="text-indigo-100 text-sm md:text-base" data-mocha-canvas-id="src/Header.tsx:56:14" data-mocha-canvas-editable="true" data-mocha-canvas-text="Streamline%20your%20productivity%20with%20our%20intuitive%20task%20management%20system">Streamline your productivity with our intuitive task management system</p>
                  </div>
                </header>);

      }"
    `);
    });
    test('handles simple JSX strings', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div>Hello, world</div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div data-mocha-canvas-id="src/components/some-component.tsx:4:10" data-mocha-canvas-editable="true" data-mocha-canvas-text="Hello%2C%20world">Hello, world</div>);

      };"
    `);
    });
    test('handles multi line JSX strings', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div>
            Hello
            world
          </div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div data-mocha-canvas-id="src/components/some-component.tsx:4:10" data-mocha-canvas-editable="true" data-mocha-canvas-text="Hello%0A%20%20%20%20%20%20%20%20%20%20%20%20world">
                  Hello
                  world
                </div>);

      };"
    `);
    });
    test('handles simple string literals', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div>{"Hello, world"}</div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div data-mocha-canvas-id="src/components/some-component.tsx:4:10" data-mocha-canvas-editable="true" data-mocha-canvas-text="Hello%2C%20world">{"Hello, world"}</div>);

      };"
    `);
    });
    test('handles template literal without expressions', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div>{\`Hello, world\`}</div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div data-mocha-canvas-id="src/components/some-component.tsx:4:10" data-mocha-canvas-editable="true" data-mocha-canvas-text="Hello%2C%20world">{\`Hello, world\`}</div>);

      };"
    `);
    });
    test('handles empty tags', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <span></span>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <span></span>);

      };"
    `);
    });
    test('handles interpolated template literal', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div>{\`Hello, $\{planetName\}\`}</div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div data-mocha-canvas-id="src/components/some-component.tsx:4:10" data-mocha-canvas-editable="false" data-mocha-canvas-text="">{\`Hello, \${planetName}\`}</div>);

      };"
    `);
    });
    test('handles dynamic expressions', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div>Hello, {planetName}</div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div data-mocha-canvas-id="src/components/some-component.tsx:4:10" data-mocha-canvas-editable="false" data-mocha-canvas-text="">Hello, {planetName}</div>);

      };"
    `);
    });
    test('handles static text with allowed inline tags', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div>Hello, <b>world</b></div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div data-mocha-canvas-id="src/components/some-component.tsx:4:10" data-mocha-canvas-editable="true" data-mocha-canvas-text="Hello%2C%20world">Hello, <b data-mocha-canvas-id="src/components/some-component.tsx:4:22" data-mocha-canvas-editable="true" data-mocha-canvas-text="world">world</b></div>);

      };"
    `);
    });
    test('handles static text with multiple allowed inline tags', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div><i>Hello</i>, <b>world</b></div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div data-mocha-canvas-id="src/components/some-component.tsx:4:10" data-mocha-canvas-editable="true" data-mocha-canvas-text="Hello%2C%20world"><i data-mocha-canvas-id="src/components/some-component.tsx:4:15" data-mocha-canvas-editable="true" data-mocha-canvas-text="Hello">Hello</i>, <b data-mocha-canvas-id="src/components/some-component.tsx:4:29" data-mocha-canvas-editable="true" data-mocha-canvas-text="world">world</b></div>);

      };"
    `);
    });
    test('handles static text with non-allowed inline tags', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div>Hello, <a href="https://getmocha.com">world</a></div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div>Hello, <a href="https://getmocha.com" data-mocha-canvas-id="src/components/some-component.tsx:4:22" data-mocha-canvas-editable="true" data-mocha-canvas-text="world">world</a></div>);

      };"
    `);
    });
    test('handles custom components without text', () => {
        const { code } = transformJSX(`
      import FancyComponent from './FancyComponent';

      export default function SomeComponent() {
        return (
          <div><FancyComponent/></div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      import FancyComponent from './FancyComponent';

      export default function SomeComponent() {
        return (
          <div><FancyComponent /></div>);

      };"
    `);
    });
    test('handles custom components with text', () => {
        const { code } = transformJSX(`
      import FancyComponent from './FancyComponent';

      export default function SomeComponent() {
        return (
          <FancyComponent>Hello, world</FancyComponent>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      import FancyComponent from './FancyComponent';

      export default function SomeComponent() {
        return (
          <FancyComponent data-mocha-canvas-id="src/components/some-component.tsx:6:10" data-mocha-canvas-editable="true" data-mocha-canvas-text="Hello%2C%20world">Hello, world</FancyComponent>);

      };"
    `);
    });
    test('ignores components from libraries that do not play nicely with data-* attrs', () => {
        const { code } = transformJSX(`
      import { Text } from '@react-three/drei';

      export default function SomeComponent() {
        return (
          <Text>Hello, world</Text>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      import { Text } from '@react-three/drei';

      export default function SomeComponent() {
        return (
          <Text>Hello, world</Text>);

      };"
    `);
    });
    test('handles JSX fragments', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div><></></div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div><></></div>);

      };"
    `);
    });
    test('handles non-string literals', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div>{42}</div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div data-mocha-canvas-id="src/components/some-component.tsx:4:10" data-mocha-canvas-editable="false" data-mocha-canvas-text="">{42}</div>);

      };"
    `);
    });
    test('handles nested inline tags literals', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div><b>Hello <i>world</i></b></div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div data-mocha-canvas-id="src/components/some-component.tsx:4:10" data-mocha-canvas-editable="true" data-mocha-canvas-text="Hello%20world"><b data-mocha-canvas-id="src/components/some-component.tsx:4:15" data-mocha-canvas-editable="true" data-mocha-canvas-text="Hello%20world">Hello <i data-mocha-canvas-id="src/components/some-component.tsx:4:24" data-mocha-canvas-editable="true" data-mocha-canvas-text="world">world</i></b></div>);

      };"
    `);
    });
    test('handles nested stylable tags', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div><span><u>Nice</u> day</span></div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div data-mocha-canvas-id="src/components/some-component.tsx:4:10" data-mocha-canvas-editable="true" data-mocha-canvas-text="Nice%20day"><span data-mocha-canvas-id="src/components/some-component.tsx:4:15" data-mocha-canvas-editable="true" data-mocha-canvas-text="Nice%20day"><u data-mocha-canvas-id="src/components/some-component.tsx:4:21" data-mocha-canvas-editable="true" data-mocha-canvas-text="Nice">Nice</u> day</span></div>);

      };"
    `);
    });
    test('handles breaks', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div>Hello,<br/> world</div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div data-mocha-canvas-id="src/components/some-component.tsx:4:10" data-mocha-canvas-editable="true" data-mocha-canvas-text="Hello%2C%20world">Hello,<br /> world</div>);

      };"
    `);
    });
    test('trims newlines from indented children', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div>
            Organize your day, achieve more
          </div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div data-mocha-canvas-id="src/components/some-component.tsx:4:10" data-mocha-canvas-editable="true" data-mocha-canvas-text="Organize%20your%20day%2C%20achieve%20more">
                  Organize your day, achieve more
                </div>);

      };"
    `);
    });
    describe('stripSourceAttributes', () => {
        test('removes custom attributes added for canvas mode', () => {
            const { ast } = addSourceAttributes(`
        import { useState } from 'react';
        import { SquareCheck, Menu, X } from 'lucide-react';

        export default function Header() {
          const [isMenuOpen, setIsMenuOpen] = useState(false);

          return (
            <header className="bg-gradient-to-r shadow-lg">
              <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div className="flex justify-between h-16">
                  <div className="flex items-center">
                    <div className="flex-shrink-0 flex items-center">
                      <SquareCheck className="h-8 w-8 text-white" />
                      <span className="ml-2 text-xl font-bold text-white">TaskFlow</span>
                    </div>
                    <div className="hidden md:ml-6 md:flex md:space-x-8">
                      <a href="#" className="px-3 py-2 text-sm font-medium">Home</a>
                      <a href="#" className="px-3 py-2 text-sm font-medium">Features</a>
                      <a href="#" className="px-3 py-2 text-sm font-medium">Pricing</a>
                      <a href="#" className="px-3 py-2 text-sm font-medium">About</a>
                    </div>
                  </div>
                  <div className="hidden md:flex items-center">
                    <button className="px-4 py-2 rounded-md text-sm font-medium shadow-sm transition-all duration-200 transform">
                      Sign Up
                    </button>
                  </div>
                  <div className="flex items-center md:hidden">
                    <button
                      type="button"
                      className="text-white"
                      onClick={() => setIsMenuOpen(!isMenuOpen)}
                    >
                      {isMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
                    </button>
                  </div>
                </div>
              </div>

              {/* Mobile menu */}
              {isMenuOpen && (
                <div className="md:hidden">
                  <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-indigo-500">
                    <a href="#" className="block px-3 py-2 text-base font-medium">Home</a>
                    <a href="#" className="block px-3 py-2 text-base font-medium">Features</a>
                    <a href="#" className="block px-3 py-2 text-base font-medium">Pricing</a>
                    <a href="#" className="block px-3 py-2 text-base font-medium">About</a>
                    <button className="w-full text-center px-4 py-2 rounded-md text-sm font-medium mt-3">
                      Sign Up
                    </button>
                  </div>
                </div>
              )}
              <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
                <p className="text-indigo-100 text-sm md:text-base">Streamline your productivity with our intuitive task management system</p>
              </div>
            </header>
          );
        }
        `, '/app/src/Header.tsx');
            const { code } = stripSourceAttributes({ ast });
            expect(code).toMatchInlineSnapshot(`
        "import { useState } from 'react';
        import { SquareCheck, Menu, X } from 'lucide-react';
        export default function Header() {
          const [isMenuOpen, setIsMenuOpen] = useState(false);
          return <header className="bg-gradient-to-r shadow-lg">
                      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                        <div className="flex justify-between h-16">
                          <div className="flex items-center">
                            <div className="flex-shrink-0 flex items-center">
                              <SquareCheck className="h-8 w-8 text-white" />
                              <span className="ml-2 text-xl font-bold text-white">TaskFlow</span>
                            </div>
                            <div className="hidden md:ml-6 md:flex md:space-x-8">
                              <a href="#" className="px-3 py-2 text-sm font-medium">Home</a>
                              <a href="#" className="px-3 py-2 text-sm font-medium">Features</a>
                              <a href="#" className="px-3 py-2 text-sm font-medium">Pricing</a>
                              <a href="#" className="px-3 py-2 text-sm font-medium">About</a>
                            </div>
                          </div>
                          <div className="hidden md:flex items-center">
                            <button className="px-4 py-2 rounded-md text-sm font-medium shadow-sm transition-all duration-200 transform">
                              Sign Up
                            </button>
                          </div>
                          <div className="flex items-center md:hidden">
                            <button type="button" className="text-white" onClick={() => setIsMenuOpen(!isMenuOpen)}>
                              {isMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
                            </button>
                          </div>
                        </div>
                      </div>

                      {/* Mobile menu */}
                      {isMenuOpen && <div className="md:hidden">
                          <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-indigo-500">
                            <a href="#" className="block px-3 py-2 text-base font-medium">Home</a>
                            <a href="#" className="block px-3 py-2 text-base font-medium">Features</a>
                            <a href="#" className="block px-3 py-2 text-base font-medium">Pricing</a>
                            <a href="#" className="block px-3 py-2 text-base font-medium">About</a>
                            <button className="w-full text-center px-4 py-2 rounded-md text-sm font-medium mt-3">
                              Sign Up
                            </button>
                          </div>
                        </div>}
                      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
                        <p className="text-indigo-100 text-sm md:text-base">Streamline your productivity with our intuitive task management system</p>
                      </div>
                    </header>;
        }"
      `);
        });
    });
});
describe('replacing text', () => {
    test('handles simple JSX strings', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div>Hello, world</div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div data-mocha-canvas-id="src/components/some-component.tsx:4:10" data-mocha-canvas-editable="true" data-mocha-canvas-text="Hello%2C%20world">Hello, world</div>);

      };"
    `);
        const { code: updated } = replaceTextAndStripSourceAttributes('src/components/some-component.tsx:4:10', 'Hello, Earth');
        expect(updated).toMatchInlineSnapshot(`
      "export default function SomeComponent() {
        return <div>Hello, Earth</div>;
      }
      ;"
    `);
    });
    test('handles multi line JSX strings', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div>
            Hello
            world
          </div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div data-mocha-canvas-id="src/components/some-component.tsx:4:10" data-mocha-canvas-editable="true" data-mocha-canvas-text="Hello%0A%20%20%20%20%20%20%20%20%20%20%20%20world">
                  Hello
                  world
                </div>);

      };"
    `);
        const { code: updated } = replaceTextAndStripSourceAttributes('src/components/some-component.tsx:4:10', 'Hello, Earth');
        expect(updated).toMatchInlineSnapshot(`
      "export default function SomeComponent() {
        return <div>Hello, Earth</div>;
      }
      ;"
    `);
    });
    test('handles simple string literals', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div>{"Hello, world"}</div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div data-mocha-canvas-id="src/components/some-component.tsx:4:10" data-mocha-canvas-editable="true" data-mocha-canvas-text="Hello%2C%20world">{"Hello, world"}</div>);

      };"
    `);
        const { code: updated } = replaceTextAndStripSourceAttributes('src/components/some-component.tsx:4:10', 'Hello, Earth');
        expect(updated).toMatchInlineSnapshot(`
      "export default function SomeComponent() {
        return <div>Hello, Earth</div>;
      }
      ;"
    `);
    });
    test('handles template literal without expressions', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div>{\`Hello, world\`}</div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div data-mocha-canvas-id="src/components/some-component.tsx:4:10" data-mocha-canvas-editable="true" data-mocha-canvas-text="Hello%2C%20world">{\`Hello, world\`}</div>);

      };"
    `);
        const { code: updated } = replaceTextAndStripSourceAttributes('src/components/some-component.tsx:4:10', 'Hello, Earth');
        expect(updated).toMatchInlineSnapshot(`
      "export default function SomeComponent() {
        return <div>Hello, Earth</div>;
      }
      ;"
    `);
    });
    test('handles static text with allowed inline tags', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div>Hello, <b>world</b></div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div data-mocha-canvas-id="src/components/some-component.tsx:4:10" data-mocha-canvas-editable="true" data-mocha-canvas-text="Hello%2C%20world">Hello, <b data-mocha-canvas-id="src/components/some-component.tsx:4:22" data-mocha-canvas-editable="true" data-mocha-canvas-text="world">world</b></div>);

      };"
    `);
        const { code: updated } = replaceTextAndStripSourceAttributes('src/components/some-component.tsx:4:10', 'Hello, Earth');
        expect(updated).toMatchInlineSnapshot(`
      "export default function SomeComponent() {
        return <div>Hello, Earth</div>;
      }
      ;"
    `);
    });
    test('handles static text with multiple allowed inline tags', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div><i>Hello</i>, <b>world</b></div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div data-mocha-canvas-id="src/components/some-component.tsx:4:10" data-mocha-canvas-editable="true" data-mocha-canvas-text="Hello%2C%20world"><i data-mocha-canvas-id="src/components/some-component.tsx:4:15" data-mocha-canvas-editable="true" data-mocha-canvas-text="Hello">Hello</i>, <b data-mocha-canvas-id="src/components/some-component.tsx:4:29" data-mocha-canvas-editable="true" data-mocha-canvas-text="world">world</b></div>);

      };"
    `);
        const { code: updated } = replaceTextAndStripSourceAttributes('src/components/some-component.tsx:4:10', 'Hello, Earth');
        expect(updated).toMatchInlineSnapshot(`
      "export default function SomeComponent() {
        return <div>Hello, Earth</div>;
      }
      ;"
    `);
    });
    test('handles static text with non-allowed inline tags', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div>Hello, <a href="https://getmocha.com">world</a></div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div>Hello, <a href="https://getmocha.com" data-mocha-canvas-id="src/components/some-component.tsx:4:22" data-mocha-canvas-editable="true" data-mocha-canvas-text="world">world</a></div>);

      };"
    `);
        const { code: updated } = replaceTextAndStripSourceAttributes('src/components/some-component.tsx:4:22', 'Earth');
        expect(updated).toMatchInlineSnapshot(`
      "export default function SomeComponent() {
        return <div>Hello, <a href="https://getmocha.com">Earth</a></div>;
      }
      ;"
    `);
    });
    test('handles nested inline tags literals', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div><b>Hello <i>world</i></b></div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div data-mocha-canvas-id="src/components/some-component.tsx:4:10" data-mocha-canvas-editable="true" data-mocha-canvas-text="Hello%20world"><b data-mocha-canvas-id="src/components/some-component.tsx:4:15" data-mocha-canvas-editable="true" data-mocha-canvas-text="Hello%20world">Hello <i data-mocha-canvas-id="src/components/some-component.tsx:4:24" data-mocha-canvas-editable="true" data-mocha-canvas-text="world">world</i></b></div>);

      };"
    `);
        const { code: updated } = replaceTextAndStripSourceAttributes('src/components/some-component.tsx:4:10', 'Hello, Earth');
        expect(updated).toMatchInlineSnapshot(`
      "export default function SomeComponent() {
        return <div>Hello, Earth</div>;
      }
      ;"
    `);
    });
    test('handles nested allowed tags', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div><span><u>Nice</u> day</span></div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div data-mocha-canvas-id="src/components/some-component.tsx:4:10" data-mocha-canvas-editable="true" data-mocha-canvas-text="Nice%20day"><span data-mocha-canvas-id="src/components/some-component.tsx:4:15" data-mocha-canvas-editable="true" data-mocha-canvas-text="Nice%20day"><u data-mocha-canvas-id="src/components/some-component.tsx:4:21" data-mocha-canvas-editable="true" data-mocha-canvas-text="Nice">Nice</u> day</span></div>);

      };"
    `);
        const { code: updated } = replaceTextAndStripSourceAttributes('src/components/some-component.tsx:4:10', 'Hello, Earth');
        expect(updated).toMatchInlineSnapshot(`
      "export default function SomeComponent() {
        return <div>Hello, Earth</div>;
      }
      ;"
    `);
    });
    test('handles breaks', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div>Hello,<br/> world</div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div data-mocha-canvas-id="src/components/some-component.tsx:4:10" data-mocha-canvas-editable="true" data-mocha-canvas-text="Hello%2C%20world">Hello,<br /> world</div>);

      };"
    `);
        const { code: updated } = replaceTextAndStripSourceAttributes('src/components/some-component.tsx:4:10', 'Hello, Earth');
        expect(updated).toMatchInlineSnapshot(`
      "export default function SomeComponent() {
        return <div>Hello, Earth</div>;
      }
      ;"
    `);
    });
    test('trims newlines from indented children', () => {
        const { code } = transformJSX(`
      export default function SomeComponent() {
        return (
          <div>
            Organize your day, achieve more
          </div>
        );
      };
      `, '/app/src/components/some-component.tsx');
        expect(code).toMatchInlineSnapshot(`
      "
      export default function SomeComponent() {
        return (
          <div data-mocha-canvas-id="src/components/some-component.tsx:4:10" data-mocha-canvas-editable="true" data-mocha-canvas-text="Organize%20your%20day%2C%20achieve%20more">
                  Organize your day, achieve more
                </div>);

      };"
    `);
    });
    // See https://github.com/vitejs/vite-plugin-react/tree/main/packages/plugin-react#consistent-components-exports
    test.skip('skips files that have exports that might not play nicely with fast refresh', () => { });
});
