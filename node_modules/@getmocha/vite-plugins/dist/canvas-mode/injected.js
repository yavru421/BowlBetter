import { CANVAS_EDITABLE_ATTR, CANVAS_ID_ATTR, CANVAS_TEXT_ATTR, } from 'virtual:canvas-mode-constants';
console.log('[mocha-canvas-mode] installed!');
if (!window.__mochaCanvasModeHandlersRegistered && import.meta.hot) {
    let __mochaCanvasModeEnabled = false;
    const highlightClass = '__mocha-canvas-highlight';
    function removeStyles() {
        const existing = document.getElementById('__mocha-canvas-style');
        if (existing)
            existing.remove();
    }
    function injectStyles(styles) {
        removeStyles();
        const style = document.createElement('style');
        style.id = '__mocha-canvas-style';
        style.textContent = `
      .${highlightClass} {
        cursor: pointer;
      }
      .${highlightClass}[${CANVAS_EDITABLE_ATTR}="true"] {
        outline: ${styles['editableOutline']};
      }
      .${highlightClass}[${CANVAS_EDITABLE_ATTR}="false"] {
        outline: ${styles['uneditableOutline']};
      }
    `;
        document.head.appendChild(style);
    }
    function isEnabled() {
        return __mochaCanvasModeEnabled;
    }
    document.addEventListener('mouseover', (e) => {
        if (!isEnabled())
            return;
        const el = e.target;
        if (!(el instanceof HTMLElement))
            return;
        if (!el.hasAttribute(CANVAS_ID_ATTR))
            return;
        el.classList.add(highlightClass);
    });
    document.addEventListener('mouseout', (e) => {
        if (!isEnabled())
            return;
        const el = e.target;
        if (!(el instanceof HTMLElement))
            return;
        el.classList.remove(highlightClass);
    });
    document.addEventListener('click', (e) => {
        if (!isEnabled())
            return;
        if (!import.meta.hot)
            return;
        if (!window.parent)
            return;
        if (!e.target)
            return;
        const el = e.target?.closest(`[${CANVAS_ID_ATTR}]`);
        if (el) {
            e.preventDefault();
            e.stopPropagation();
            const elementId = el.getAttribute(CANVAS_ID_ATTR);
            const isEditable = el.getAttribute(CANVAS_EDITABLE_ATTR) == 'true';
            const text = el.getAttribute(CANVAS_TEXT_ATTR) || '';
            // When editable element is clicked, instruct Mocha to open modal.
            // When form is submitted, Mocha can post a "mocha:canvas:update-element"
            // event back to the iframe, which is propogated along to Vite's HMR.
            window.parent.postMessage({
                type: 'mocha:canvas:open-update-element-modal',
                elementId,
                isEditable,
                text: decodeURIComponent(text),
                elementRect: el.getBoundingClientRect(),
                clickPosition: {
                    clientX: e.clientX,
                    clientY: e.clientY,
                },
            }, '*');
        }
    }, true);
    // Propogate allowlist-ed events from Mocha --> Vite HMR.
    window.addEventListener('message', (event) => {
        if (!import.meta.hot)
            return;
        switch (event.data.type) {
            case 'mocha:canvas:toggle-canvas-mode': {
                __mochaCanvasModeEnabled = event.data.isEnabled;
                if (isEnabled()) {
                    injectStyles(event.data.styles);
                }
                else {
                    removeStyles();
                }
                import.meta.hot.send(event.data.type, event.data);
            }
            case 'mocha:canvas:update-element': {
                import.meta.hot.send(event.data.type, event.data);
            }
        }
    }, false);
    import.meta.hot.on('mocha:canvas:file-updated', (data) => {
        if (window.parent) {
            window.parent.postMessage({
                type: 'mocha:canvas:file-updated',
                path: data.path,
                content: data.content,
            }, '*');
        }
    });
    if (window.parent) {
        console.log('[mocha-canvas-mode] installed!');
        window.parent.postMessage({
            type: 'mocha:canvas:installed',
            appId: MOCHA_ENV.APP_ID,
            isEnabled: isEnabled(),
        }, '*');
    }
    window.__mochaCanvasModeHandlersRegistered = true;
}
